{"code":""<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/database.php';\n\nuse GuzzleHttp\\Client;\n\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Content-Type: application/json\");\n\n// Load environment variables\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);\n$dotenv->load();\n\n$openaiApiKey = $_ENV['OPENAI_API_KEY'];\n$data = json_decode(file_get_contents(\"php://input\"), true);\n\n// Extract data\n$codeToEvaluate = $data['code'] ?? '';\n$commitHash = $data['commit_hash'] ?? '';\n$repository = $data['repository'] ?? '';\n$branch = $data['branch'] ?? '';\n$commitMessage = $data['commit_message'] ?? '';\n$userName = $data['user_name'] ?? '';\n\nif (empty($codeToEvaluate) || empty($commitHash)) {\n    echo json_encode([\"error\" => \"Missing code or commit hash\"]);\n    exit;\n}\n\n// Prepare API request\n$url = \"https://api.openai.com/v1/chat/completions\";\n$payload = [\n    \"model\" => \"gpt-4o\",\n    \"messages\" => [\n        [\"role\" => \"system\", \"content\" => \"You are a helpful assistant that reviews PHP code for potential issues.\"],\n        [\"role\" => \"user\", \"content\" => \"Review this PHP code:\\n\\n\" . $codeToEvaluate]\n    ],\n    \"max_tokens\" => 500,\n    \"temperature\" => 0.2\n];\n\n$client = new Client();\n\ntry {\n    $response = $client->post($url, [\n        'headers' => [\n            'Content-Type' => 'application/json',\n            'Authorization' => \"Bearer {$openaiApiKey}\"\n        ],\n        'json' => $payload\n    ]);\n\n    $body = json_decode($response->getBody()->getContents(), true);\n    $review = $body['choices'][0]['message']['content'] ?? \"No response received\";\n\n    // Store review in database\n    $stmt = $database->prepare(\"INSERT INTO reviews (repository, branch, commit_hash, commit_message, user_name, code, review) \n                                VALUES (:repository, :branch, :commit_hash, :commit_message, :user_name, :code, :review)\");\n    $stmt->bindValue(':repository', $repository, SQLITE3_TEXT);\n    $stmt->bindValue(':branch', $branch, SQLITE3_TEXT);\n    $stmt->bindValue(':commit_hash', $commitHash, SQLITE3_TEXT);\n    $stmt->bindValue(':commit_message', $commitMessage, SQLITE3_TEXT);\n    $stmt->bindValue(':user_name', $userName, SQLITE3_TEXT);\n    $stmt->bindValue(':code', $codeToEvaluate, SQLITE3_TEXT);\n    $stmt->bindValue(':review', $review, SQLITE3_TEXT);\n    $stmt->execute();\n\n    echo json_encode([\"review\" => $review]);\n} catch (\\Exception $e) {\n    echo json_encode([\"error\" => \"Request error: \" . $e->getMessage()]);\n}\n"", "commit_hash":"e94574240da77bbfa499db9041e210896f757626", "repository":"code_checker", "branch":"main", "commit_message":"random text", "user_name":"Milan Jaukl"}