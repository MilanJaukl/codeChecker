#!/bin/bash
#
# .git/hooks/pre-commit
#
# This script sends staged PHP files to the "evaluate_code.php" script,
# then prints the AI's feedback. Adjust or expand this logic as needed.

# 1) Collect staged *.php files
STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.php$")

# If no PHP files are staged, do nothing
if [ -z "$STAGED_PHP_FILES" ]; then
    exit 0
fi

# 2) Loop through each staged PHP file
for file in $STAGED_PHP_FILES; do
    if [ -f "$file" ]; then
        echo "Analyzing: $file"

        # Read the file contents
        FILE_CONTENT=$(cat "$file")

        # Pass content to the evaluate_code.php script
        # and store the response from OpenAI in a variable
        AI_RESPONSE=$(php C:\xampp\htdocs\code_checker\code_checker.php "$FILE_CONTENT")

        # Print the AI's feedback
        echo "----------------------------------------"
        echo "AI Feedback:"
        echo "$AI_RESPONSE"
        echo "----------------------------------------"

        # 3) (Optional) Decide if you want to block the commit
        # Example: if "Critical issue" appears in the AI's feedback
        # then block the commit
        #
        # if echo "$AI_RESPONSE" | grep -qi "critical issue"; then
        #     echo "OpenAI flagged a critical issue in $file."
        #     echo "Commit aborted."
        #     exit 1
        # fi
    fi
done

# If we reach here, allow the commit
exit 0
